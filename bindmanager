#!/usr/bin/env python
# -*- coding: utf-8 -*-
'''

    (c) 2014, Ravi Bhure <ravibhure@gmail.com>

    This file is part of bindadmin (https://github.com/ravibhure/bindadmin)

    This script does bind update changes of your zone, based on inputs provided by user or by reading in a CSV file,
    then Publishing the Zones that were updated trough the BIND API using zone allow rndc-key

    The credentials are read in from a configuration file in
    the same directory.

    The file is named config.cfg in the format:

    [defaults]
    user =  user_name
    password =  password

    [database]
    dbuser =  bindadmin
    dbpass =  password
    dbname =  dnsdb
    dbhost =  localhost

    [securekey]
    keyname = key_name
    key = XXXXXXXXXXX==


    Usage: %python bindmanager.py [-h]

    Options
        -h, --help              Show this help message and exit
        -F, FILE, --File=FILE   Add CSV file to search through for bulk IP address change.

    This script is more clearly used, stuff written and managed from following git repo written by Juned Memon:
    https://github.com/junaid18183/zonemanage
'''

from lib.bind import *
myname = os.path.basename(__file__)

def show(args):
    """
    Figure out server IP or name for a given 'zone'.
    Raise an exception if no suitable record is found.
    """

    if args.zone:
       zone = args.zone.lower()
       zoneid = zonedetails(zone)
    content = args.content
    name = args.name
    list = args.list
    try:
        if content:
           pass
        elif name:
           pass
        elif list:
           pass
        else:
           raise
    except Exception, ex:
	logger.error("At least one from 'name' or 'content' required while looking for any object.")
	logger.info("Usages: %s show -h" % myname)
	sys.exit(1)

    # Parse hostname

    try:
        if name:
	    is_valid = re.match("^(([a-zA-Z]|[a-zA-Z][a-zA-Z0-9\-]*[a-zA-Z0-9])\.)*([A-Za-z]|[A-Za-z][A-Za-z0-9\-]*[A-Za-z0-9])$", name)
	    if is_valid:
		search = name.lower()
		if args.zone:
		   search = find_hostname(zone, search)
		   sql = """ select * from records where domain_id='%s' and name like '%s.%s' """ % (zoneid, '%' + search + '%', zone)
		else:
		   sql = """ select * from records where domain_id like '%s' and name like '%s' """ % ('%', '%' + search + '%')
	    else:
		raise
        elif content:
	    search = content
	    if args.zone:
               sql = """ select * from records where domain_id='%s' and content like '%s' """ % (zoneid, '%' + search + '%')
	    else:
               sql = """ select * from records where domain_id like '%s' and content like '%s' """ % ('%', '%' + search + '%')
	elif list:
	    if args.zone:
               sql = """ select * from records where domain_id='%s' """ % (zoneid)
	    else:
               sql = """ select * from domains """
               print chk_domain(sql)
	       sys.exit(0)
    except Exception, ex:
	if name:
	   search = name
	else:
	   search = content
        logger.error("While searching given value, probabily '%s' is not valid a search " % search)
        sys.exit(1)

    print check(sql)

def addrecord(args):
    """ Connects to the zone specified by the user and add record to its fields. """
    name = args.name.lower()
    type = args.type.upper()
    content = args.content
    jissueid = args.jiraid
    zone = args.zone.lower()
    zoneid = zonedetails(zone)

    # Parse hostname
    name = find_hostname(zone, name)
    # Jira Login
    jirauser, jirapw = jira_login()
    # Jira Validation
    try:
       j_valid, j_status = get_issue_by_id(serverurl,jirauser,jirapw,jissueid)
       if j_valid:
	  if j_status:
	     statuscode = val_status(j_status)
             logger.info("Hello %s: You are authorized to run bindadmin, '%s' status is '%s' ... -:)" % (jirauser,jissueid,statuscode))
       else:
          raise
    except Exception, e:
       logger.error("Jira issue '%s' does not exist or you don't have permission to view it, please check jira and rerun again" % jissueid)
       sys.exit(1)

    # User confirm
    user_input(jirauser, 'Do you want to step through add records in the zone database')
    # Refer valid zone from named.conf
    v_zone = parse_named_file(named_file, zone)
    if v_zone:
       pass
    else:
       logger.error("Error: '%s' is not present in '%s', please check.." % (zone, named_file))
       sys.exit(1)

    if args.ttl:
	ttl = args.ttl
	try:
	   ttl = int(ttl)
	except ValueError:
	   logger.error("ttl '%s' is not an int!" % ttl)
	   sys.exit(1)
    else:
	ttl = '86400'
	logger.info("TTL is not provided, using default value '86400' seconds ie. 24 hours!")

    # Validation
    gitInit(zonepath)

    # Validation..valdation and more
    try:
        if name:
            is_valid = re.match("^(([a-zA-Z]|[a-zA-Z][a-zA-Z0-9\-]*[a-zA-Z0-9])\.)*([A-Za-z]|[A-Za-z][A-Za-z0-9\-]*[A-Za-z0-9])$", name)
            if is_valid:
              try:
                  if type in SUPPORTED_RECORD_TYPES:
                      if type == 'A':
                        try:
                            if content:
                                is_valid = re.match("^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$", content)
                                if is_valid:
				    validation(zoneid, name, zone, type, content)
                                    revzone = revzoneName(content)
                                    ptr_zone = parse_named_file(named_file, revzone)
                                    if ptr_zone:
                                       pass
                                    else:
                                       logger.info("""
                                                      zone "%s" IN {
                                                              type master;
                                                              file "%s";
                                                              allow-update { key "%s"; };
                                                      };
                                                  """ % (revzone, revzone, load_mycnf()["keyname"]))
                                       logger.error("'%s' not present in '%s', please check.. and add it correctly to refer and do reload named service." % (revzone, named_file))
                                       sys.exit()
                                else:
                                    raise
                            else:
                                raise
                        except Exception, ex:
                            logger.error("'%s' is not a valid ip" % content)
			    sys.exit(1)
                      elif type == 'CNAME':
                        try:
                            if content:
                                is_valid = re.match("^(([a-zA-Z]|[a-zA-Z][a-zA-Z0-9\-]*[a-zA-Z0-9])\.)*([A-Za-z]|[A-Za-z][A-Za-z0-9\-]*[A-Za-z0-9])$", content)
                                if is_valid:
                                    validation(zoneid, name, zone, type, content)
                                else:
                                    raise
                            else:
                                raise
                        except Exception, ex:
                            logger.error("'%s' is not a valid hostname" % content)
                            sys.exit(1)
                      elif type == 'TXT':
                        try:
                            if len(content) > 255:
                                raise
			    else:
                                validation(zoneid, name, zone, type, content)
				pass
                        except Exception, ex:
                            logger.error("Error! Only 255 characters allowed!, provide TXT content under 255 char")
                            sys.exit(1)
                      else:
                        validation(zoneid, name, zone, type, content)
                        pass
                  else:
                      raise
              except Exception, ex:
                  logger.error("'%s' is not a valid record type, reffer one from '%s'" % (type, SUPPORTED_RECORD_TYPES))
                  sys.exit(1)
            else:
                raise
        elif content:
            is_valid = re.match("^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$", ip)
            if is_valid:
		validation(zoneid, name, zone, type, content)
                pass
            else:
                raise
    except Exception, ex:
        logger.error("'%s', probabily it is not valid hostname/ip" % name)
        sys.exit(1)

    logger.info("Sanity check went good for '%s' and given args input" % zone)
    sql =  """ insert into records (domain_id, name,type,content,ttl,prio) select id, '%s.%s', '%s', '%s', '%s', 0 from domains where id='%s' """ % (name, zone, type, content, ttl, zoneid)

    # Created lock to prevent rerun multples
    lockme()
    revertzone(zone)
    result = execute(sql)
    logger.info("Successfully added record '%s in db." % name)
    action = 'add'
    data = "%s.%s. %s %s %s" % (name, zone, ttl, type, content)
    nsfile(action, zone, data)
    if type == 'A':
      revname = revName(content)
      data = "%s %s %s %s" % (revname, ttl, 'PTR', name)
      nsfile(action, revzone, data, nfile=ptrtemplate)

    dnsupdate(zone)
    if type == 'A':
      dnsupdate(revzone, nfile=ptrtemplate)
    if check_zone(zonepath, zone):
        logger.info("Validity check went good for '%s'" % zone)
	if type == 'A':
          reloadzone(zone)
	  #### Delay for 1 seconds ####
	  time.sleep(2)
	  reloadzone(revzone)
	else:
          reloadzone(zone)
        archivezone(zone, jirauser, jissueid)
        logger.info("Successfully added record '%s'" % name)
	# Release lock once all went good
        release_lock()
        return True
    else:
        revertzone(zone)
        sql = """ delete from records where domain_id='%s' and name='%s.%s' and content='%s' and type='%s' """ % (zoneid, name, zone, content, type)
        execute(sql)
	# "Task pending to remove entry from db"
        reloadzone(zone)
        release_lock()
        raise
        logger.error("in '%s' zone file, please check, we have reverted to fixed it" % zone)
        sys.exit(1)

def deleterecord(args):
    """ Connects to the zone specified by the user and delete record to its fields. """
    name = args.name.lower()
    zone = args.zone.lower()
    jissueid = args.jiraid
    type = args.type.upper()
    zoneid = zonedetails(zone)

    # Parse hostname
    name = find_hostname(zone, name)
    # Jira Login
    jirauser, jirapw = jira_login()
    # Jira Validation
    try:
       j_valid, j_status = get_issue_by_id(serverurl,jirauser,jirapw,jissueid)
       if j_valid:
	  if j_status:
	     statuscode = val_status(j_status)
             logger.info("Hello %s: You are authorized to run bindadmin, '%s' status is '%s' ... -:)" % (jirauser,jissueid,statuscode))
       else:
	  raise
    except Exception, e:
       logger.error("Jira issue '%s' does not exist or you don't have permission to view it, please check jira and rerun again" % jissueid)
       sys.exit(1)

    # User confirm
    user_input(jirauser, 'Do you want to step through remove record(s) from the zone database')
    # Refer valid zone from named.conf
    v_zone = parse_named_file(named_file, zone)
    if v_zone:
       pass
    else:
       logger.error("Error: '%s' is not present in '%s', please check.." % (zone, named_file))
       sys.exit(1)

    # Validation
    gitInit(zonepath)

    if args.content and type:
        content = args.content
        sql = """ delete from records where domain_id='%s' and name='%s.%s' and content='%s' and type='%s' """ % (zoneid, name, zone, content, type)
	data = "%s.%s. %s %s" % (name, zone, type, content)
    elif type:
        try:
            if type in SUPPORTED_RECORD_TYPES:
                sql = """ delete from records where domain_id='%s' and name='%s.%s' and type='%s' """ % (zoneid, name, zone, type)
		data = "%s.%s. %s" % (name, zone, type)
            else:
                raise
        except Exception, ex:
            logger.error("'%s' is not a valid record type, reffer one from '%s'" % (type, SUPPORTED_RECORD_TYPES))
            sys.exit(1)
    else:
        sql = """ delete from records where domain_id='%s' and name='%s.%s' """ % (zoneid, name, zone)

    lockme()
    logger.info("Sanity check went good for '%s' and given args input" % zone)
    revertzone(zone)
    result = execute(sql)
    logger.info("Successfully removed record '%s' from db." % name)
    ttl = '86400'
    action = 'delete'
    nsfile(action, zone, data)

    dnsupdate(zone)
    if type == 'A':
        logger.warning("Please check and remove associate PTR for this if unused..")
    if check_zone(zonepath, zone):
        logger.info("Validity check went good for '%s'" % zone)
        reloadzone(zone)
        archivezone(zone, jirauser, jissueid)
        logger.info("Successfully removed record '%s'" % name)
        # Release lock once all went good
        release_lock()
        return True
    else:
        revertzone(zone)
        reloadzone(zone)
        release_lock()
        raise
        logger.error("in '%s' zone file, please check, we have reverted to fixed it" % zone)
        sys.exit(1)

def main():
    """
    Figure out what you want to do from bindadmin, and then do the
    needful (at the earliest).
    """
    parser = argparse.ArgumentParser(description="Queries the zone database for Build information", epilog="To know more, write to: %s" % authoremail)
    subparsers = parser.add_subparsers()

    # toggle show record
    parser_show = subparsers.add_parser('show',help="Show's your defined search from given zone")
    parser_show.add_argument("-z", "--zone", help="Set the zone to be check",required=False)
    parser_show.add_argument("-n", "--name", help="The record name to be check",required=False)
    parser_show.add_argument("-c", "--content", help="The record value or ip address to be check",required=False)
    parser_show.add_argument("-l", "--list", action='store_true', help="List all record values for specified zone",required=False)
    parser_show.set_defaults(func=show)

    # toggle add record
    parser_add  = subparsers.add_parser('add', help="Add the given record to the zone")
    parser_add.add_argument("-n", "--name", help="The record name to add",required=True)
    parser_add.add_argument("-t", "--type", help="The record type to add for record name",required=True)
    parser_add.add_argument("-c", "--content", help="The record value to add for record name",required=True)
    parser_add.add_argument("-z", "--zone", help="Set the zone to be updated",required=True)
    parser_add.add_argument("-j", "--jiraid", help="Jira ID for auth and request tracking",required=True)
    parser_add.add_argument("--ttl", help="The record ttl to add for record name",required=False)
    parser_add.set_defaults(func=addrecord)

    # toggle delte record
    parser_delete  = subparsers.add_parser('delete', help="Remove the given record from the zone(s)")
    parser_delete.add_argument("-n", "--name", help="The record name to delete",required=True)
    parser_delete.add_argument("-t", "--type", help="The record type to delete for record name",required=True)
    parser_delete.add_argument("-c", "--content", help="The record value to add for record name",required=False)
    parser_delete.add_argument("-z", "--zone", help="Set the zone to be updated",required=True)
    parser_delete.add_argument("-j", "--jiraid", help="Jira ID for auth and request tracking",required=True)
    parser_delete.set_defaults(func=deleterecord)

    args = parser.parse_args()

    args.func(args)
    return 0

# +----------------------------------------------------------------------+

if __name__ == "__main__":
    sys.exit(main())
